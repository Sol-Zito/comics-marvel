import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import BodySingle from "dh-marvel/components/layouts/body/single/body-single";
import { getComics } from "dh-marvel/services/marvel/marvel.service";
import { ComicGrid } from "dh-marvel/components/comicGrid/ComicGrid";
import { PropsInit } from "interfaces/propsInit";
import { ChangeEvent, useState } from "react";
import { useRouter } from "next/router";
import { Pagination } from "@mui/material";

/**En esta página se deberá mostrar un listado en forma de grilla de los cómics de Marvel disponibles para su visualización 
 * detallada y para su compra. 

Se deberá tener en cuenta lo siguiente:
* Permitir que todo el contenido junto con los resultados de la primer página, sean indexable por los buscadores.
* Esta página debera utilizar el [Layout General](#layout-general)
* Esta página permite la funcionalidad [Opcional 3: Compra de 1 Click](#opcional-3-compra-de-1-click) */

const pageSize = 12;

const Index: NextPage<PropsInit> = ({ initialComics, total, page }) => {
  const [currentPage, setCurrentPage] = useState(page);
  const router = useRouter();
  const handlePageChange = (event: ChangeEvent<unknown>, value: number) => {
    setCurrentPage(value);
    router.push(`/?page=${value}`);
  };
  return (
    <>
      <Head>
        <title>Dh-Marvel</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <BodySingle title={"Welcome to DH-Marvel"}>
        <ComicGrid initialComics={initialComics} />
        <Pagination
          count={Math.round(total / pageSize)}
          onChange={handlePageChange}
          sx={{ margin: "10px auto" }}
          color="secondary"
          size="medium"
        />
      </BodySingle>
    </>
  );
};

export default Index;

export const getServerSideProps: GetServerSideProps = async ({
  query,
  res,
}) => {
  const currentPage = Number(query.page ?? 1);
  const offset = (currentPage - 1) * 12;
  const comicsApi = await getComics(offset, pageSize);
  res.setHeader("Cache-Control", "public, s-maxage=10, stale-while-revalidate");
  const initialComics = comicsApi?.data?.results || [];
  const total = comicsApi?.data?.total ?? null;

  return {
    props: {
      initialComics,
      total,
      page: offset,
    },
  };
};
