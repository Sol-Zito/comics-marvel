import * as React from "react";
import { NextPage, GetServerSideProps } from "next";
import { getComic } from "dh-marvel/services/marvel/marvel.service";
import { Grid, Typography } from "@mui/material";
import { Comics } from "dh-marvel/features/marvel/comics.type";
import ComicCheckout from "dh-marvel/components/comicCard/ComicCheckout";
import LayoutCheckout from "dh-marvel/components/layouts/layout-checkout";
import BodySingle from "dh-marvel/components/layouts/body/single/body-single";
import { FormProvider, useForm } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { schema } from "rules";
import { FormCheckout } from "dh-marvel/components/form/FormCheckout";
import Head from "next/head";
import {
  DataCheckout,
  changeData,
} from "dh-marvel/components/form/utils/DataCheckout";
import { useRouter } from "next/router";
import { CheckoutInput } from "dh-marvel/features/checkout/checkout.types";
import { SimpleSnackbar } from "dh-marvel/components/form/utils/SanckbarComponent";

interface Props {
  comic: Comics;
  id: number;
}

const CheckoutPage: NextPage<Props> = ({ comic, id }) => {
  const [errorMessage, setErrorMessage] = React.useState("");
  const router = useRouter();
  type DataForm = yup.InferType<typeof schema>;

  const methods = useForm<DataForm>({
    resolver: yupResolver(schema),
    defaultValues: {},
  });

  const onSubmit = async (data: any) => {
    if (!comic) {
      return;
    }
    const _data: DataCheckout = {
      ...data,
      comicName: comic.title,
      comicImage: `${comic.thumbnail.path}.${comic.thumbnail.extension}`,
      comicPrice: comic.price,
    };
    const request = changeData(_data);
    postDataCheckout(request);
  };
  const postDataCheckout = async (request: CheckoutInput) => {
    const urlLocal = "http://localhost:3000/api/checkout";
    try {
      const response = await fetch(urlLocal, {
        method: "POST",
        body: JSON.stringify(request),
        headers: {
          "Content-Type": "application/json",
        },
      });
      const parseRes = await response.json();
      if (response.ok) {
        router.push(
          {
            pathname: "/confirmacion-compra",
            query: {
              comicName: parseRes.data.order.name,
              comicImage: parseRes.data.order.image,
              comicPrice: parseRes.data.order.price,
              address: parseRes.data.customer.address.address1,
            },
          },
          "/confirmacion-compra"
        );
      } else {
        setErrorMessage(parseRes.message as string);
      }
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <LayoutCheckout>
      <Head>
        <title>Dh-Marvel</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BodySingle title="Checkout:">
        <Grid container spacing={2} columnSpacing={{ xs: 1, sm: 2, md: 4 }}>
          <Grid
            item
            xs={12}
            md={4}
            sx={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <ComicCheckout {...comic} />
          </Grid>
          <Grid
            item
            xs={12}
            md={8}
            sx={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              justifyContent: "center",
              gap: "5px",
            }}
          >
            {comic?.stock > 0 ? (
              <>
                <FormProvider {...methods}>
                  <FormCheckout id={id} comic={comic} onSubmit={onSubmit} />
                  {errorMessage && (
                    <>
                      {/* <Typography variant="h6">{errorMessage}</Typography> */}
                      <SimpleSnackbar message={errorMessage} status={true} />
                    </>
                  )}
                </FormProvider>
              </>
            ) : (
              <Typography variant="h4" align="center" mt={2}>
                Sorry, there isn't stock available at the moment...
              </Typography>
            )}
          </Grid>
        </Grid>
      </BodySingle>
    </LayoutCheckout>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
  const id = Number(params?.id);
  const data = await getComic(id);
  return {
    props: {
      comic: data,
      id: id,
    },
  };
};

export default CheckoutPage;
